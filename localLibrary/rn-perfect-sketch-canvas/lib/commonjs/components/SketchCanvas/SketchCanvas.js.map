{"version":3,"names":["SketchCanvas","forwardRef","ref","strokeWidth","STROKE_WIDTH","strokeColor","STROKE_COLOR","strokeStyle","STROKE_STYLE","containerStyle","children","topChildren","bottomChildren","pathsSnapshot","useSnapshot","derivedPaths","canvasRef","useCanvasRef","stack","useMemo","createHistoryStack","currentPoints","drawingState","completedPoints","useEffect","width","useImperativeHandle","reset","points","push","undo","value","redo","toBase64","format","quality","image","current","makeImageSnapshot","encodeToBase64","ImageFormat","PNG","undefined","toImage","toSvg","height","backgroundColor","createSvgFromPaths","completed","toPoints","map","p","addPoints","style","formatted","data","id","Date","now","color","touchHandler","useTouchHandler","onStart","touchInfo","isDrawing","x","y","onActive","onEnd","timestamp","path"],"sources":["SketchCanvas.tsx"],"sourcesContent":["import {\n  Canvas,\n  Path,\n  TouchInfo,\n  useCanvasRef,\n  useTouchHandler,\n} from '@shopify/react-native-skia';\nimport React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n} from 'react';\nimport { drawingState, derivedPaths } from '../../store';\nimport { useSnapshot } from 'valtio';\nimport { createHistoryStack, createSvgFromPaths } from '../../utils';\nimport type {\n  SketchCanvasRef,\n  SketchCanvasProps,\n  Point,\n  StyleOptions,\n} from './types';\nimport { ImageFormat } from './types';\nimport { STROKE_COLOR, STROKE_STYLE, STROKE_WIDTH } from './constants';\n\nexport const SketchCanvas = forwardRef<SketchCanvasRef, SketchCanvasProps>(\n  (\n    {\n      strokeWidth = STROKE_WIDTH,\n      strokeColor = STROKE_COLOR,\n      strokeStyle = STROKE_STYLE,\n      containerStyle,\n      children,\n      topChildren,\n      bottomChildren,\n    },\n    ref\n  ) => {\n    const pathsSnapshot = useSnapshot(derivedPaths);\n    const canvasRef = useCanvasRef();\n    const stack = useMemo(\n      () =>\n        createHistoryStack({\n          currentPoints: drawingState.currentPoints,\n          completedPoints: drawingState.completedPoints,\n        }),\n      []\n    );\n\n    useEffect(() => {\n      drawingState.currentPoints.width = strokeWidth;\n    }, [strokeWidth]);\n\n    useImperativeHandle(ref, () => ({\n      reset() {\n        drawingState.currentPoints.points = null;\n        drawingState.completedPoints = [];\n        stack.push({\n          currentPoints: drawingState.currentPoints,\n          completedPoints: drawingState.completedPoints,\n        });\n      },\n      undo() {\n        const value = stack.undo();\n        drawingState.currentPoints = value.currentPoints;\n        drawingState.completedPoints = value.completedPoints;\n      },\n      redo() {\n        const value = stack.redo();\n        drawingState.currentPoints = value.currentPoints;\n        drawingState.completedPoints = value.completedPoints;\n      },\n      toBase64: (format, quality) => {\n        const image = canvasRef.current?.makeImageSnapshot();\n        if (image) {\n          return image.encodeToBase64(\n            // @ts-expect-error: Internal\n            format ?? ImageFormat.PNG,\n            quality ?? 100\n          );\n        }\n        return undefined;\n      },\n      toImage: () => {\n        return canvasRef.current?.makeImageSnapshot();\n      },\n      toSvg: (width, height, backgroundColor) => {\n        return createSvgFromPaths(derivedPaths.completed, {\n          width,\n          height,\n          backgroundColor,\n        });\n      },\n      toPoints: () => {\n        return drawingState.completedPoints.map((p) => p.points);\n      },\n      addPoints: (points: Point[][], style?: StyleOptions) => {\n        const formatted = points.map((data) => ({\n          id: Date.now(),\n          points: data,\n          color: style?.strokeColor ?? STROKE_COLOR,\n          width: style?.strokeWidth ?? STROKE_WIDTH,\n          style: style?.strokeStyle ?? STROKE_STYLE,\n        }));\n        drawingState.completedPoints = formatted;\n      },\n    }));\n\n    const touchHandler = useTouchHandler(\n      {\n        onStart: (touchInfo: TouchInfo) => {\n          drawingState.isDrawing = true;\n          drawingState.currentPoints.points = [[touchInfo.x, touchInfo.y]];\n        },\n        onActive: (touchInfo: TouchInfo) => {\n          if (!drawingState.isDrawing) {\n            return;\n          }\n\n          drawingState.currentPoints.points = [\n            ...(drawingState.currentPoints.points ?? []),\n            [touchInfo.x, touchInfo.y],\n          ];\n        },\n        onEnd: (touchInfo: TouchInfo) => {\n          drawingState.isDrawing = false;\n\n          if (!drawingState.currentPoints.points) {\n            return;\n          }\n\n          drawingState.completedPoints = [\n            ...drawingState.completedPoints,\n            {\n              id: touchInfo.timestamp,\n              points: drawingState.currentPoints.points,\n              width: drawingState.currentPoints.width,\n              color: strokeColor,\n              style: strokeStyle,\n            },\n          ];\n          drawingState.currentPoints.points = null;\n\n          stack.push({\n            currentPoints: drawingState.currentPoints,\n            completedPoints: drawingState.completedPoints,\n          });\n        },\n      },\n      [strokeColor, strokeStyle]\n    );\n\n    return (\n      <Canvas ref={canvasRef} onTouch={touchHandler} style={containerStyle}>\n        {bottomChildren}\n        {children}\n        {pathsSnapshot.completed.map((path) => (\n          <Path\n            path={path.path}\n            key={path.id}\n            style={path.style}\n            color={path.color}\n          />\n        ))}\n        {pathsSnapshot.current ? (\n          <Path\n            path={pathsSnapshot.current}\n            color={strokeColor}\n            style={strokeStyle}\n          />\n        ) : (\n          <></>\n        )}\n        {topChildren}\n      </Canvas>\n    );\n  }\n);\n"],"mappings":"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"}